<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>OBER ‚Äî Angry Taxi</title>
<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
<style>
  :root{--ui:#fff;--good:#27e59a;--bad:#ff6464;--shadow:rgba(0,0,0,.25)}
  html,body{margin:0;height:100%;background:#000;color:#fff;font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial}
  #game{display:block;width:100vw;height:100vh;touch-action:none}
  #hud{position:fixed;left:12px;top:10px;z-index:5;background:rgba(0,0,0,.35);backdrop-filter:blur(6px);padding:8px 10px;border-radius:10px;font-weight:600;font-size:14px;line-height:1.2;box-shadow:0 4px 16px var(--shadow);user-select:none}
  #hud .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
  #hud .pill{padding:2px 8px;border-radius:999px;background:rgba(255,255,255,.08);font-weight:700}
  #envTag{padding:2px 8px;border-radius:6px;background:rgba(255,255,255,.12);font-weight:700}
  #buttons{position:fixed;right:12px;top:10px;display:flex;gap:8px;z-index:6}
  .btn{appearance:none;border:none;cursor:pointer;background:rgba(255,255,255,.12);color:#fff;padding:8px 12px;border-radius:10px;font-weight:700;box-shadow:0 6px 20px var(--shadow)}
  .btn:active{transform:translateY(1px)}
  #startOverlay,#gameOver{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:linear-gradient(180deg,rgba(0,0,0,.65),rgba(0,0,0,.85));z-index:10;text-align:center;padding:24px}
  .card{max-width:720px;background:rgba(255,255,255,.08);backdrop-filter:blur(8px);border:1px solid rgba(255,255,255,.15);border-radius:16px;padding:20px 18px 16px;box-shadow:0 30px 80px rgba(0,0,0,.5)}
  .title{font-size:28px;margin:4px 0 10px;font-weight:900;letter-spacing:.5px}
  .subtitle{opacity:.9;margin-bottom:16px}
  .kbd{display:inline-block;background:rgba(255,255,255,.12);padding:2px 8px;border-radius:6px;font-weight:800}
  .primary{background:linear-gradient(180deg,#ff6db5,#ff2d7a);color:#fff;border:none;border-radius:12px;padding:12px 18px;font-size:18px;font-weight:900;cursor:pointer}
  #toast{position:fixed;left:50%;bottom:22vh;transform:translateX(-50%);z-index:7;font-weight:900;letter-spacing:.4px;text-shadow:0 2px 10px rgba(0,0,0,.6);pointer-events:none;font-size:18px}
  #touch{position:fixed;inset:auto 0 0 0;padding:8px 12px 14px;display:flex;justify-content:space-between;align-items:flex-end;gap:12px;z-index:6;pointer-events:none}
  .pad{pointer-events:auto;display:grid;grid-template-areas:". up .""left . right"". down .";gap:10px;place-items:center}
  .ctl{width:68px;height:68px;border-radius:14px;border:none;font-size:28px;font-weight:900;background:rgba(255,255,255,.14);color:#fff;box-shadow:0 10px 30px var(--shadow)}
  .ctl:active{transform:translateY(2px)} .up{grid-area:up}.down{grid-area:down}.left{grid-area:left}.right{grid-area:right}
  .help{opacity:.85;font-size:12px;margin-top:6px}
  @media (min-width:900px){#touch{display:none}}
</style>
</head>
<body>
<canvas id="game"></canvas>

<div id="hud">
  <div class="row">
    <div class="pill">Score: <b id="score">0</b></div>
    <div class="pill">Best: <b id="best">0</b></div>
    <div class="pill">Misses: <b id="misses">0</b>/2</div>
    <div id="envTag">City</div>
  </div>
</div>

<div id="buttons">
  <button id="pauseBtn" class="btn">Pause</button>
  <button id="muteBtn" class="btn">Music: On</button>
</div>

<div id="touch">
  <div>
    <div class="pad" id="dpad">
      <button class="ctl up" data-dir="up">‚ñ≤</button>
      <button class="ctl left" data-dir="left">‚óÄ</button>
      <button class="ctl right" data-dir="right">‚ñ∂</button>
      <button class="ctl down" data-dir="down">‚ñº</button>
    </div>
    <div class="help">Use arrows to steer the taxi</div>
  </div>
  <button id="pauseBig" class="btn" style="pointer-events:auto;height:68px">‚èØ Pause</button>
</div>

<div id="toast"></div>

<div id="startOverlay" role="dialog" aria-modal="true">
  <div class="card">
    <div class="title">OBER ‚Äî Angry Taxi</div>
    <div class="subtitle">Dodge traffic & obstacles, <b>pick up passengers</b> (miss two in a row ‚Üí game over). üçã = 3s invincible turbo. Patrice = 3s shooting.</div>
    <ul style="text-align:left;line-height:1.55;margin:0 0 14px 0;padding-left:18px">
      <li><b>Keyboard:</b> Arrows/WASD ‚Ä¢ <span class="kbd">Space</span> start ‚Ä¢ <span class="kbd">P</span> pause ‚Ä¢ <span class="kbd">M</span> music</li>
      <li><b>Mobile:</b> Use the on-screen arrows</li>
      <li><b>Environments:</b> City ‚Üí Desert ‚Üí Space ‚Üí Underwater ‚Üí Futuristic (25s each)</li>
    </ul>
    <button id="startBtn" class="primary">‚ñ∂ Start</button>
  </div>
</div>

<div id="gameOver" hidden>
  <div class="card">
    <div class="title">Game Over</div>
    <div id="reason" class="subtitle"></div>
    <div style="display:flex;gap:10px;justify-content:center">
      <button id="restartBtn" class="primary">‚Üª Restart</button>
      <button id="closeBtn" class="btn">Close</button>
    </div>
  </div>
</div>

<script>
(function(){
  'use strict';

  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');

  // Retina fit
  let DPR = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
  function resize(){
    const w = innerWidth, h = innerHeight;
    canvas.width = Math.floor(w*DPR); canvas.height = Math.floor(h*DPR);
    canvas.style.width = w+'px'; canvas.style.height = h+'px';
    ctx.setTransform(DPR,0,0,DPR,0,0);
  }
  resize(); addEventListener('resize', resize);

  // UI refs
  const $score = document.getElementById('score'), $best = document.getElementById('best');
  const $misses = document.getElementById('misses'), $envTag = document.getElementById('envTag');
  const $toast = document.getElementById('toast'), $pauseBtn = document.getElementById('pauseBtn');
  const $muteBtn = document.getElementById('muteBtn'), $pauseBig = document.getElementById('pauseBig');
  const $startOverlay = document.getElementById('startOverlay'), $startBtn = document.getElementById('startBtn');
  const $gameOver = document.getElementById('gameOver'), $restartBtn = document.getElementById('restartBtn');
  const $closeBtn = document.getElementById('closeBtn'), $reason = document.getElementById('reason');
  const $dpad = document.getElementById('dpad');

  // Input
  const keys = {up:false,down:false,left:false,right:false};
  function clearInput(){ keys.up=keys.down=keys.left=keys.right=false; }
  addEventListener('keydown',e=>{
    if(['ArrowUp','ArrowDown','ArrowLeft','ArrowRight',' '].includes(e.key)) e.preventDefault();
    if(e.key==='ArrowUp'||e.key==='w'||e.key==='W') keys.up=true;
    else if(e.key==='ArrowDown'||e.key==='s'||e.key==='S') keys.down=true;
    else if(e.key==='ArrowLeft'||e.key==='a'||e.key==='A') keys.left=true;
    else if(e.key==='ArrowRight'||e.key==='d'||e.key==='D') keys.right=true;
    else if(e.key===' ') startGame();
    else if(e.key==='p'||e.key==='P') togglePause();
    else if(e.key==='m'||e.key==='M') toggleMusic();
  });
  addEventListener('keyup',e=>{
    if(e.key==='ArrowUp'||e.key==='w'||e.key==='W') keys.up=false;
    else if(e.key==='ArrowDown'||e.key==='s'||e.key==='S') keys.down=false;
    else if(e.key==='ArrowLeft'||e.key==='a'||e.key==='A') keys.left=false;
    else if(e.key==='ArrowRight'||e.key==='d'||e.key==='D') keys.right=false;
  });
  const touchMap = new Map();
  function onPad(e){
    const btn = e.target.closest('.ctl'); if(!btn) return;
    const dir = btn.dataset.dir;
    if(e.type==='pointerdown'){ btn.setPointerCapture?.(e.pointerId); touchMap.set(e.pointerId,dir); keys[dir]=true; }
    else if(e.type==='pointerup' || e.type==='pointercancel' || e.type==='pointerleave'){ const d=touchMap.get(e.pointerId); if(d){ keys[d]=false; touchMap.delete(e.pointerId);} }
    e.preventDefault();
  }
  ['pointerdown','pointerup','pointercancel','pointerleave'].forEach(t=> $dpad.addEventListener(t,onPad,{passive:false}));

  // Buttons
  $pauseBtn.onclick = togglePause;
  $pauseBig.onclick = togglePause;
  $muteBtn.onclick = toggleMusic;
  $startBtn.onclick = startGame;
  $restartBtn.onclick = ()=>{ hide($gameOver); startGame(); };
  $closeBtn.onclick = ()=>{ hide($gameOver); show($startOverlay); };

  // Utils
  function show(el){ el.hidden=false; el.style.display='flex'; }
  function hide(el){ el.hidden=true; el.style.display='none'; }
  function clamp(v,min,max){ return Math.max(min, Math.min(max,v)) }
  function lerp(a,b,t){ return a+(b-a)*t }
  function rand(a,b){ return a+Math.random()*(b-a) }
  function choice(a){ return a[(Math.random()*a.length)|0] }
  function toast(text,color='#fff'){ $toast.textContent=text; $toast.style.color=color; toast.until = performance.now()+1400; }

  // Environments
  const ENV = [
    {name:'City', sky:'#0b1020', road:'#2a2e39', edge:'#141821', stripe:'#f7f7f7', fog:'rgba(11,16,32,0.35)', deco:'#6ee7ff'},
    {name:'Desert', sky:'#1e1409', road:'#6b4b2a', edge:'#3e2c17', stripe:'#fff3c4', fog:'rgba(30,20,9,0.35)', deco:'#ffe08a'},
    {name:'Space', sky:'#000006', road:'#242424', edge:'#101010', stripe:'#d8f0ff', fog:'rgba(0,0,6,0.4)', deco:'#9fe3ff'},
    {name:'Underwater', sky:'#05131b', road:'#1b3a4b', edge:'#0d2330', stripe:'#d6fff9', fog:'rgba(5,19,27,0.45)', deco:'#72f1ff'},
    {name:'Futuristic', sky:'#04040e', road:'#1a1a2e', edge:'#0d0d1a', stripe:'#9affff', fog:'rgba(4,4,14,0.40)', deco:'#5ef2ff'},
  ];

  const NAMES = ["Steve","Butterboots","Laura","Olivia","Caoimhe","HughSmells","Fionnuala","Richard","Lorna","Killian","Helen","Bill","Colm"];
  const LANE_COUNT = 4;

  // Audio (original single loop)
  let AC=null, master, musicOn=true, musicStarted=false, sched;
  const music = {bpm:136, step:0, next:0};
  function audioInit(){ if(AC) return; const A = window.AudioContext||window.webkitAudioContext; if(!A) return; AC=new A(); master=AC.createGain(); master.gain.value=0.28; master.connect(AC.destination); buildDrums(); buildBuses(); }
  let kick, snare, hat, bass, pad, lead;
  function buildDrums(){
    kick=(t)=>{ const o=AC.createOscillator(), g=AC.createGain(); o.frequency.setValueAtTime(150,t); o.frequency.exponentialRampToValueAtTime(45,t+0.12); g.gain.setValueAtTime(0.8,t); g.gain.exponentialRampToValueAtTime(0.0001,t+0.18); o.connect(g); g.connect(master); o.start(t); o.stop(t+0.2); };
    const noiseBuf=(()=>{ const b=AC.createBuffer(1,AC.sampleRate*0.2,AC.sampleRate); const d=b.getChannelData(0); for(let i=0;i<d.length;i++) d[i]=Math.random()*2-1; return b;})();
    snare=(t)=>{ const s=AC.createBufferSource(); s.buffer=noiseBuf; const b=AC.createBiquadFilter(); b.type='highpass'; b.frequency.value=1800; const g=AC.createGain(); g.gain.setValueAtTime(0.25,t); g.gain.exponentialRampToValueAtTime(0.00001,t+0.12); s.connect(b); b.connect(g); g.connect(master); s.start(t); s.stop(t+0.2); };
    hat=(t)=>{ const s=AC.createBufferSource(); const b=AC.createBuffer(1,AC.sampleRate*0.05,AC.sampleRate); const d=b.getChannelData(0); for(let i=0;i<d.length;i++) d[i]=(Math.random()*2-1)*0.8; s.buffer=b; const f=AC.createBiquadFilter(); f.type='highpass'; f.frequency.value=7000; const g=AC.createGain(); g.gain.setValueAtTime(0.15,t); g.gain.exponentialRampToValueAtTime(0.00001,t+0.05); s.connect(f); f.connect(g); g.connect(master); s.start(t); s.stop(t+0.06); };
  }
  function buildBuses(){ bass={g:AC.createGain()}; pad={g:AC.createGain()}; lead={g:AC.createGain()}; bass.g.gain.value=0.28; pad.g.gain.value=0.14; lead.g.gain.value=0.2; bass.g.connect(master); pad.g.connect(master); lead.g.connect(master); }
  function note(freq, len, t, dest, type='sawtooth'){ const o=AC.createOscillator(), g=AC.createGain(); o.type=type; o.frequency.setValueAtTime(freq,t); g.gain.setValueAtTime(0.001,t); g.gain.linearRampToValueAtTime(0.35,t+0.01); g.gain.exponentialRampToValueAtTime(0.0001,t+len); o.connect(g); g.connect(dest); o.start(t); o.stop(t+len+0.05); }
  function chord(f, t){ note(f,0.4,t,pad.g,'sawtooth'); note(f*1.25,0.4,t,pad.g,'sawtooth'); note(f*1.5,0.4,t,pad.g,'sawtooth'); }
  function startMusic(){
    if(musicStarted) return; audioInit(); if(!AC) return; if(AC.state==='suspended') AC.resume();
    const stepDur=60/music.bpm/4, look=0.1; music.next=AC.currentTime+0.05;
    sched=setInterval(()=>{ const ct=AC.currentTime; while(music.next<ct+look){ scheduleStep(music.step, music.next); music.step=(music.step+1)%64; music.next+=stepDur; } },25);
    musicStarted=true;
  }
  function scheduleStep(step,t){
    const beat=step%16, bar=(step/16)|0;
    if(beat===0||beat===8) kick(t);
    if(beat===4||beat===12) snare(t);
    if([1,3,5,7,9,11,13,15].includes(beat)) hat(t);
    const root = [110,98,130,87][bar%4];
    if(beat===0) chord(root,t);
    const bassFreqs = [root, root*1.5, root*1.25, root*1.5];
    const bf = bassFreqs[(beat/4)|0];
    if(beat%4===0) note(bf,0.23,t,bass.g,'square');
    const scale=[261.63,293.66,311.13,349.23,392.0,415.3,466.16];
    const phrase=[0,3,5,7,5,3,2,0];
    if(beat%2===0){ const idx=phrase[(beat/2)%phrase.length]; const f=scale[idx%scale.length]*(bar%2?1:2); note(f,0.15,t,lead.g,'triangle'); }
  }
  function toggleMusic(){ const on = (master?.gain?.value||0)>0 ? false : true; if(on){ master.gain.value=0.28; } else { master.gain.value=0; } $muteBtn.textContent='Music: '+(on?'On':'Off'); }

  // Game state
  const state = {
    status:'idle', t:0, dt:0, last:0,
    score:0, best:+localStorage.getItem('ober_best')||0, misses:0,
    envIndex:0, envTime:0, envSwapEvery:25,
    worldSpeed:260, // slightly slower start; ramps up
    roadWidth:0,
    // Speed boosts: base * 1.33 * 1.33 * 1.33 ‚âà 2.35x, accel ‚âà 1.77x
    player:{x:0,y:0,w:50,h:86,vx:0,vy:0,maxVx:340*2.352, maxVy:280*2.352, accel:1200*1.77, invUntil:0, turboUntil:0, stinkUntil:0, speechUntil:0, quipNext:0, quipFlip:false, shootUntil:0, shootTimer:0},
    items:{cars:[],obstacles:[],passengers:[],lemons:[],patrice:[],bullets:[],deco:[]},
    spawn:{car:0,ob:0,pass:1.5,lem:10+Math.random()*10,pat:16+Math.random()*12},
    carSpawnScale:1.15, // 15% fewer cars
    lastPassengerSpawnAt: performance.now()
  };

  // Start/Pause/Restart
  function startGame(){
    if(state.status==='playing') return;
    hide($startOverlay); hide($gameOver);
    startMusic();
    reset();
    state.status='playing';
    toast('Go!','var(--good)');
  }
  function togglePause(){
    if(state.status==='playing'){ state.status='paused'; toast('Paused'); }
    else if(state.status==='paused'){ state.last=performance.now(); state.status='playing'; toast('Go!'); }
  }
  function reset(){
    state.t=0; state.dt=0; state.last=0; state.score=0; state.misses=0;
    state.envIndex=0; state.envTime=0; state.worldSpeed=260;
    state.items={cars:[],obstacles:[],passengers:[],lemons:[],patrice:[],bullets:[],deco:[]};
    state.spawn={car:0,ob:0,pass:1.2,lem:8+Math.random()*10,pat:14+Math.random()*12};
    const W=canvas.clientWidth,H=canvas.clientHeight;
    state.player.x=W/2; state.player.y=H*0.78;
    state.player.vx=state.player.vy=0;
    state.player.invUntil=0; state.player.turboUntil=0; state.player.stinkUntil=0; state.player.speechUntil=0;
    state.player.shootUntil=0; state.player.shootTimer=0;
    state.player.quipNext=performance.now()+10000; state.player.quipFlip=false;
    state.lastPassengerSpawnAt = performance.now();
    state.roadWidth = Math.min(640, Math.max(340, W*0.72));
    clearInput(); updateUI();
  }

  // Quips
  const quips = { text:'' };
  function scheduleQuips(now){
    if(now >= state.player.quipNext && state.status==='playing'){
      quips.text = state.player.quipFlip ? 'Not too bad' : 'SLOW C*NTS';
      state.player.quipFlip = !state.player.quipFlip;
      state.player.speechUntil = now + 1800;
      state.player.quipNext = now + 10000 + Math.random()*1500;
    }
  }

  // Spawning helpers
  function laneX(l){ const W=canvas.clientWidth; const sway=Math.sin(state.t*0.6)*42 + Math.sin(state.t*0.27)*24; const left=(W-state.roadWidth)/2 + sway; const laneW=state.roadWidth/LANE_COUNT; return left + l*laneW + laneW/2; }
  function pickSafePassengerLane(){
    const spawnY = -60;
    const SAFE_Y = 220;
    const busy = new Set();
    for(const c of state.items.cars){
      if(Math.abs(c.y - spawnY) < SAFE_Y){
        busy.add(c.l);
        if(c.l>0) busy.add(c.l-1);
        if(c.l<LANE_COUNT-1) busy.add(c.l+1);
      }
    }
    const safe=[]; for(let l=0;l<LANE_COUNT;l++){ if(!busy.has(l)) safe.push(l); }
    if(safe.length) return choice(safe);
    // fallback: farthest
    let best=0,score=-1; for(let l=0;l<LANE_COUNT;l++){ let s=0; for(const c of state.items.cars){ s=Math.max(s,Math.abs(l-c.l)); } if(s>score){ score=s; best=l; } }
    return best;
  }

  function spawnCar(){
    const l=(Math.random()*LANE_COUNT)|0;
    state.items.cars.push({x:laneX(l), y:-120, w:56, h:96, l, spd:state.worldSpeed*rand(0.75,1.2), col:`hsl(${(Math.random()*360)|0} 85% 62%)`});
  }
  function spawnOb(){
    const l=(Math.random()*LANE_COUNT)|0;
    const cone=Math.random()<0.5;
    state.items.obstacles.push({x:laneX(l), y:-80, w:cone?34:60, h:cone?50:40, l, cone});
  }
  function spawnPassenger(){
    const l = pickSafePassengerLane();
    state.items.passengers.push({x:laneX(l), y:-60, w:26, h:44, l, name:choice(NAMES), missed:false});
    state.lastPassengerSpawnAt = performance.now();
  }
  function spawnLemon(){
    const l=(Math.random()*LANE_COUNT)|0;
    state.items.lemons.push({x:laneX(l), y:-60, w:30, h:30, l});
  }
  function spawnPatrice(){
    const l=(Math.random()*LANE_COUNT)|0;
    // Long brown tube ~2x size
    state.items.patrice.push({x:laneX(l), y:-60, w:64, h:24, l});
  }
  function spawnDeco(){
    const y=-10, W=canvas.clientWidth, env=ENV[state.envIndex].name;
    if(env==='City'){
      state.items.deco.push({k:'window',x:rand(20,W-20),y});
      if(Math.random()<0.2) state.items.deco.push({k:'billboard',x:rand(30,W-30),y});
    } else if(env==='Desert'){
      state.items.deco.push({k:'cactus',x:rand(18,W-18),y});
      if(Math.random()<0.1) state.items.deco.push({k:'sun',x:rand(30,W-30),y});
    } else if(env==='Space'){
      state.items.deco.push({k:'star',x:rand(10,W-10),y,r:rand(1,2.2)});
      if(Math.random()<0.12) state.items.deco.push({k:'planet',x:rand(20,W-20),y,r:rand(8,16)});
      if(Math.random()<0.05) state.items.deco.push({k:'comet',x:rand(10,W-10),y,vx:rand(-40,40)});
    } else if(env==='Underwater'){
      if(Math.random()<0.7) state.items.deco.push({k:'bubble',x:rand(10,W-10),y,r:rand(3,8)});
      if(Math.random()<0.25) state.items.deco.push({k:'fish',x:rand(20,W-20),y,vx:rand(-20,20)});
      if(Math.random()<0.2) state.items.deco.push({k:'weed',x:rand(20,W-20),y});
    } else { // Futuristic
      state.items.deco.push({k:'holo',x:rand(20,W-20),y});
      if(Math.random()<0.25) state.items.deco.push({k:'drone',x:rand(20,W-20),y,vx:rand(-25,25)});
      if(Math.random()<0.2) state.items.deco.push({k:'beam',x:rand(20,W-20),y});
    }
  }

  // Collision
  function hit(a,b){ return Math.abs(a.x-b.x)<(a.w+b.w)/2 && Math.abs(a.y-b.y)<(a.h+b.h)/2 }

  // Loop (always runs)
  requestAnimationFrame(loop);
  function loop(now){
    if(!state.last) state.last=now;
    state.dt=Math.min(0.033,(now-state.last)/1000); state.last=now;

    if(state.status==='playing'){ update(now); }
    draw(); // draw every frame so overlays/toast render

    updateUI();
    if($toast.textContent && now>toast.until){ $toast.textContent=''; }
    requestAnimationFrame(loop);
  }

  function endGame(reason){
    state.best = Math.max(state.best, Math.floor(state.score));
    localStorage.setItem('ober_best', state.best);
    $reason.textContent = reason;
    show($gameOver);
    state.status='over';
  }

  // Update
  function update(nowMs){
    state.t += state.dt; state.envTime += state.dt;
    if(state.envTime>=state.envSwapEvery){ state.envTime=0; state.envIndex=(state.envIndex+1)%ENV.length; }

    // Slight speed ramp
    state.worldSpeed += state.dt*3.5;

    // Spawns (car rate reduced 15%)
    state.spawn.car -= state.dt; if(state.spawn.car<=0){ spawnCar(); state.spawn.car = (rand(0.38,0.9))*state.carSpawnScale; }
    state.spawn.ob  -= state.dt; if(state.spawn.ob<=0){ if(Math.random()<0.55) spawnOb(); state.spawn.ob = rand(1.2,2.4); }

    // Passenger ‚Äî normal cadence OR watchdog (12s max gap)
    state.spawn.pass -= state.dt;
    if(state.items.passengers.length===0){
      if(state.spawn.pass<=0 || (nowMs - state.lastPassengerSpawnAt) > 12000){
        spawnPassenger();
        state.spawn.pass = rand(4.5,8.5);
      }
    }

    state.spawn.lem -= state.dt; if(state.spawn.lem<=0){ spawnLemon(); state.spawn.lem = 10 + Math.random()*14; }
    state.spawn.pat -= state.dt; if(state.spawn.pat<=0){ spawnPatrice(); state.spawn.pat = 15 + Math.random()*18; }
    if(Math.random()<0.25) spawnDeco();

    // Player movement
    const p=state.player;
    const boost=(p.turboUntil>nowMs)?1.6:1, inv=(p.invUntil>nowMs);
    const ax=(keys.left?-1:0)+(keys.right?1:0), ay=(keys.up?-1:0)+(keys.down?1:0);
    p.vx += ax*p.accel*state.dt; p.vy += ay*p.accel*state.dt;
    const maxVx=p.maxVx*boost; p.vx=clamp(p.vx,-maxVx,maxVx); p.vy=clamp(p.vy,-p.maxVy,p.maxVy);
    p.vx*=0.86; p.vy*=0.86;
    p.x+=p.vx*state.dt; p.y+=p.vy*state.dt;
    const W=canvas.clientWidth,H=canvas.clientHeight; const sway=Math.sin(state.t*0.6)*42 + Math.sin(state.t*0.27)*24;
    const left=(W-state.roadWidth)/2 + sway, right=left+state.roadWidth;
    p.x=clamp(p.x,left+40,right-40); p.y=clamp(p.y,H*0.35,H-60);

    // Scroll world
    const scroll=state.worldSpeed*state.dt*boost;
    for(const c of state.items.cars){ c.y+=scroll + (c.spd-state.worldSpeed)*state.dt; c.x += (laneX(c.l)-c.x)*0.06; }
    for(const o of state.items.obstacles){ o.y+=scroll; o.x += (laneX(o.l)-o.x)*0.06; }
    for(const g of state.items.passengers){
      g.y+=scroll*0.9; g.x += (laneX(g.l)-g.x)*0.06;
      if(!g.missed && g.y>H+60){ g.missed=true; state.misses++; toast('Missed '+g.name,'var(--bad)'); if(state.misses>=2){ endGame('You missed two passengers in a row.'); return; } }
    }
    for(const lem of state.items.lemons){ lem.y+=scroll; lem.x += (laneX(lem.l)-lem.x)*0.06; }
    for(const t of state.items.patrice){ t.y+=scroll; t.x += (laneX(t.l)-t.x)*0.06; }
    for(const d of state.items.deco){ d.y+=scroll*(ENV[state.envIndex].name==='Underwater'?0.5:0.9); if(d.k==='fish'||d.k==='drone'||d.k==='comet'){ d.x+= (d.vx||0)*state.dt; } }

    // Score
    state.score += state.dt*(10 + (boost>1?6:0));

    // Collisions
    // Cars
    for(let i=state.items.cars.length-1;i>=0;i--){
      const c=state.items.cars[i];
      if(hit(p,c)){
        if(inv){ state.items.cars.splice(i,1); toast('Bumped (invincible!)','var(--good)'); }
        else { endGame('You crashed into traffic.'); return; }
      }
      if(c.y>H+140) state.items.cars.splice(i,1);
    }
    // Obstacles
    for(let i=state.items.obstacles.length-1;i>=0;i--){
      const o=state.items.obstacles[i];
      if(hit(p,o)){
        if(inv){ state.items.obstacles.splice(i,1); }
        else { endGame('You hit an obstacle.'); return; }
      }
      if(o.y>H+100) state.items.obstacles.splice(i,1);
    }
    // Passengers
    for(let i=state.items.passengers.length-1;i>=0;i--){
      const g=state.items.passengers[i];
      if(hit(p,g)){
        state.items.passengers.splice(i,1);
        state.misses=0; state.score+=30;
        const special = g.name==='HughSmells';
        toast('Picked up '+g.name, special ? '#ffa84d':'var(--good)');
        if(special){ p.stinkUntil=nowMs+3500; p.speechUntil=nowMs+2000; quips.text='Aaahhh that stinks'; }
      }
    }
    // Lemons
    for(let i=state.items.lemons.length-1;i>=0;i--){
      const lem=state.items.lemons[i];
      if(hit(p,lem)){
        state.items.lemons.splice(i,1);
        const end=nowMs+3000; p.invUntil=Math.max(p.invUntil,end); p.turboUntil=Math.max(p.turboUntil,end);
        toast('üçã LEMON TURBO!','var(--good)');
      }
      if(lem.y>H+100) state.items.lemons.splice(i,1);
    }
    // Patrice pickup
    for(let i=state.items.patrice.length-1;i>=0;i--){
      const t=state.items.patrice[i];
      if(hit(p,t)){
        state.items.patrice.splice(i,1);
        p.shootUntil = nowMs+3000; p.shootTimer=0;
        p.speechUntil = nowMs+1500; quips.text='Patrice online';
        toast('Patrice ready','var(--good)');
      }
      if(t.y>H+100) state.items.patrice.splice(i,1);
    }

    // Shooting (auto while active)
    if(p.shootUntil>nowMs){
      p.shootTimer -= state.dt;
      if(p.shootTimer<=0){
        p.shootTimer = 0.15;
        state.items.bullets.push({x:p.x, y:p.y-60, w:6, h:14, vy:-900});
      }
    }
    // Bullets update + hit cars/obstacles
    for(let i=state.items.bullets.length-1;i>=0;i--){
      const b=state.items.bullets[i]; b.y += b.vy*state.dt;
      let removed=false;
      // cars first
      for(let j=state.items.cars.length-1;j>=0;j--){
        if(hit(b,state.items.cars[j])){ state.items.cars.splice(j,1); removed=true; state.score+=10; break; }
      }
      // obstacles next (if not already removed)
      if(!removed){
        for(let j=state.items.obstacles.length-1;j>=0;j--){
          if(hit(b,state.items.obstacles[j])){ state.items.obstacles.splice(j,1); removed=true; state.score+=6; break; }
        }
      }
      if(removed || b.y<-40){ state.items.bullets.splice(i,1); }
    }

    // Quips
    scheduleQuips(nowMs);
  }

  // Draw
  function draw(){
    const W=canvas.clientWidth,H=canvas.clientHeight, env=ENV[state.envIndex];
    ctx.fillStyle=env.sky; ctx.fillRect(0,0,W,H);
    drawDecoBack(env);
    const sway=Math.sin(state.t*0.6)*42 + Math.sin(state.t*0.27)*24;
    const left=(W-state.roadWidth)/2 + sway, laneW=state.roadWidth/LANE_COUNT;
    ctx.fillStyle=env.edge; ctx.fillRect(left-18,0,state.roadWidth+36,H);
    ctx.fillStyle=env.road; ctx.fillRect(left,0,state.roadWidth,H);
    ctx.strokeStyle=env.stripe; ctx.lineWidth=4; ctx.setLineDash([18,18]); ctx.beginPath();
    for(let i=1;i<LANE_COUNT;i++){ const x=left+i*laneW; ctx.moveTo(x,0); ctx.lineTo(x,H); }
    ctx.stroke(); ctx.setLineDash([]);

    // Entities
    for(const c of state.items.cars) drawCar(c.x,c.y,c.w,c.h,c.col,false);
    for(const o of state.items.obstacles) drawObstacle(o);
    for(const g of state.items.passengers) drawPassenger(g);
    for(const lem of state.items.lemons) drawLemon(lem);
    for(const t of state.items.patrice) drawPatrice(t);
    for(const b of state.items.bullets) drawBullet(b);

    // Player last (on top)
    drawCar(state.player.x,state.player.y,50,86,'#ffd400',true);

    // Overlay fog
    ctx.fillStyle=env.fog; ctx.fillRect(0,0,W,H);
  }

  // Env deco
  function drawDecoBack(env){
    const name=env.name;
    if(name==='City'){
      ctx.fillStyle=env.deco;
      for(const d of state.items.deco){ if(d.k==='window'){ ctx.globalAlpha=0.7; ctx.fillRect(d.x,d.y,2,8); ctx.globalAlpha=1; }
        else if(d.k==='billboard'){ ctx.globalAlpha=0.9; ctx.fillRect(d.x-16,d.y,32,10); ctx.globalAlpha=1; } }
    } else if(name==='Desert'){
      ctx.strokeStyle=env.deco; ctx.lineWidth=3;
      for(const d of state.items.deco){ if(d.k==='cactus'){ const x=d.x,y=d.y; ctx.beginPath(); ctx.moveTo(x,y); ctx.lineTo(x,y+18); ctx.moveTo(x-4,y+5); ctx.lineTo(x,y+9); ctx.moveTo(x+4,y+7); ctx.lineTo(x,y+12); ctx.stroke(); }
        else if(d.k==='sun'){ ctx.fillStyle=env.deco; ctx.beginPath(); ctx.arc(d.x,d.y,6,0,Math.PI*2); ctx.fill(); } }
    } else if(name==='Space'){
      for(const d of state.items.deco){
        if(d.k==='star'){ ctx.fillStyle=env.deco; ctx.globalAlpha=0.9; ctx.fillRect(d.x,d.y,d.r,d.r); ctx.globalAlpha=1; }
        else if(d.k==='planet'){ ctx.strokeStyle=env.deco; ctx.beginPath(); ctx.arc(d.x,d.y,d.r,0,Math.PI*2); ctx.stroke(); }
        else if(d.k==='comet'){ ctx.strokeStyle=env.deco; ctx.beginPath(); ctx.moveTo(d.x,d.y); ctx.lineTo(d.x-(d.vx||20)*0.2, d.y-10); ctx.stroke(); }
      }
    } else if(name==='Underwater'){
      for(const d of state.items.deco){
        if(d.k==='bubble'){ ctx.strokeStyle=env.deco; ctx.lineWidth=1; ctx.beginPath(); ctx.arc(d.x,d.y,d.r,0,Math.PI*2); ctx.stroke(); }
        else if(d.k==='fish'){ ctx.fillStyle=env.deco; ctx.beginPath(); ctx.ellipse(d.x,d.y,8,4,0,0,Math.PI*2); ctx.fill(); }
        else if(d.k==='weed'){ ctx.strokeStyle=env.deco; ctx.beginPath(); ctx.moveTo(d.x,d.y); ctx.lineTo(d.x-4,d.y+14); ctx.lineTo(d.x+2,d.y+22); ctx.stroke(); }
      }
    } else { // Futuristic
      for(const d of state.items.deco){
        if(d.k==='holo'){ ctx.strokeStyle=env.deco; ctx.strokeRect(d.x-10,d.y,20,12); }
        else if(d.k==='drone'){ ctx.fillStyle=env.deco; ctx.fillRect(d.x-6,d.y-3,12,6); }
        else if(d.k==='beam'){ ctx.strokeStyle=env.deco; ctx.beginPath(); ctx.moveTo(d.x,d.y); ctx.lineTo(d.x,d.y+22); ctx.stroke(); }
      }
    }
  }

  // Drawing helpers
  function roundRect(x,y,w,h,r,fill){ const rr=Math.min(r,w/2,h/2); ctx.beginPath(); ctx.moveTo(x+rr,y); ctx.arcTo(x+w,y,x+w,y+h,rr); ctx.arcTo(x+w,y+h,x,y+h,rr); ctx.arcTo(x,y+h,x,y,rr); ctx.arcTo(x,y,x+w,y,rr); if(fill){ ctx.fillStyle=fill; ctx.fill(); } }
  function drawCar(x,y,w,h,color,isPlayer){
    // body
    roundRect(x-w/2,y-h/2,w,h,10,color);
    // wheels
    ctx.fillStyle='#111'; ctx.fillRect(x-w/2+6,y-h/2+10,12,24); ctx.fillRect(x+w/2-18,y-h/2+10,12,24);
    ctx.fillRect(x-w/2+6,y+h/2-34,12,24); ctx.fillRect(x+w/2-18,y+h/2-34,12,24);
    // windows
    ctx.fillStyle='rgba(0,0,0,.55)'; ctx.fillRect(x-w/2+8,y-h/2+16,w-16,26);
    // lights
    ctx.fillStyle='#fff7be'; ctx.fillRect(x-w/2+10,y-h/2+4,12,4); ctx.fillRect(x+w/2-22,y-h/2+4,12,4);
    ctx.fillStyle='#ff2a2a'; ctx.fillRect(x-w/2+10,y+h/2-8,12,4); ctx.fillRect(x+w/2-22,y+h/2-8,12,4);
    // roof text only for player
    if(isPlayer){
      ctx.fillStyle='#000'; ctx.font='900 18px Inter, system-ui, Arial'; ctx.textAlign='center'; ctx.fillText('OBER',x,y-6);
      const now=performance.now();
      // flames if turbo
      if(state.player.turboUntil>now){ for(let i=0;i<3;i++){ const fx=x+(i-1)*7, len=18+Math.random()*18, col=`hsl(${10+Math.random()*35} 95% ${55+Math.random()*20}%)`; ctx.strokeStyle=col; ctx.lineWidth=3; ctx.beginPath(); ctx.moveTo(fx,y+h/2); ctx.lineTo(fx+(Math.random()*8-4), y+h/2+len); ctx.stroke(); } }
      // stink lines when HughSmells onboard
      if(state.player.stinkUntil>now){
        ctx.strokeStyle='rgba(145,255,120,.85)'; ctx.lineWidth=2;
        for(let k=0;k<6;k++){ const sx=x+Math.sin((state.t*3)+k)*(w*0.6), sy=y-h/2-8-(k%2?6:0); ctx.beginPath(); ctx.moveTo(sx,sy); ctx.bezierCurveTo(sx-6,sy-10,sx+6,sy-18,sx,sy-26); ctx.stroke(); }
      }
      // speech bubble (quips or HughSmells)
      if(state.player.speechUntil>now && quips.text){
        drawSpeechBubble(x, y-h/2-34, quips.text);
      }
      // invincible shimmer
      if(state.player.invUntil>now){ ctx.strokeStyle='rgba(255,255,255,.9)'; ctx.lineWidth=2; ctx.strokeRect(x-w/2-3,y-h/2-3,w+6,h+6); }
    }
  }
  function drawObstacle(o){
    if(o.cone){ ctx.fillStyle='#ff7a00'; ctx.beginPath(); ctx.moveTo(o.x,o.y-o.h/2); ctx.lineTo(o.x-o.w/2,o.y+o.h/2); ctx.lineTo(o.x+o.w/2,o.y+o.h/2); ctx.closePath(); ctx.fill(); ctx.fillStyle='#fff'; ctx.fillRect(o.x-10,o.y+4,20,5); }
    else{ roundRect(o.x-o.w/2,o.y-o.h/2,o.w,o.h,6,'#c81d25'); ctx.fillStyle='#fff'; ctx.fillRect(o.x-o.w/2+8,o.y-4,o.w-16,8); }
  }
  function drawPassenger(g){
    // person: pulse ring + body + head
    ctx.strokeStyle='rgba(255,255,255,.5)'; ctx.beginPath(); ctx.arc(g.x,g.y,20,0,Math.PI*2); ctx.stroke();
    roundRect(g.x-10,g.y-14,20,28,8,'#4ade80'); // body
    ctx.fillStyle='#ffd2a1'; ctx.beginPath(); ctx.arc(g.x,g.y-20,8,0,Math.PI*2); ctx.fill(); // head
    ctx.fillStyle='#fff'; ctx.font='700 14px Inter, system-ui, Arial'; ctx.textAlign='center'; ctx.fillText(g.name,g.x,g.y-34);
  }
  function drawLemon(lem){
    ctx.fillStyle='#ffe44d'; ctx.beginPath(); ctx.ellipse(lem.x,lem.y,lem.w/2,lem.h/2,0.3,0,Math.PI*2); ctx.fill(); ctx.strokeStyle='#f7c800'; ctx.lineWidth=2; ctx.stroke();
    ctx.fillStyle='#2ecc71'; ctx.beginPath(); ctx.ellipse(lem.x+12,lem.y-10,8,4,-0.7,0,Math.PI*2); ctx.fill();
  }
  function drawPatrice(t){
    // long brown tube with caps + label
    ctx.fillStyle='#7a4a2a'; roundRect(t.x-t.w/2, t.y-t.h/2, t.w, t.h, 12, '#7a4a2a');
    ctx.fillStyle='#5d371a'; ctx.fillRect(t.x-t.w/2, t.y-t.h/2, 6, t.h);
    ctx.fillRect(t.x+t.w/2-6, t.y-t.h/2, 6, t.h);
    ctx.fillStyle='#fff'; ctx.font='900 12px Inter, system-ui, Arial'; ctx.textAlign='center'; ctx.fillText('Patrice', t.x, t.y+4);
  }
  function drawBullet(b){
    ctx.fillStyle='#9af0ff'; ctx.fillRect(b.x-b.w/2, b.y-b.h/2, b.w, b.h);
    ctx.strokeStyle='#c8ffff'; ctx.strokeRect(b.x-b.w/2, b.y-b.h/2, b.w, b.h);
  }
  function drawSpeechBubble(cx,cy,text){
    ctx.font='900 14px Inter, system-ui, Arial'; const pad=8,w=ctx.measureText(text).width+pad*2,h=28,x=cx-w/2,y=cy-h;
    roundRect(x,y,w,h,8,'rgba(0,0,0,.75)'); ctx.fillStyle='#fff'; ctx.textAlign='center'; ctx.fillText(text,cx,cy-8);
    ctx.beginPath(); ctx.moveTo(cx,cy); ctx.lineTo(cx-6,cy-8); ctx.lineTo(cx+6,cy-8); ctx.closePath(); ctx.fill();
  }

  function updateUI(){ $score.textContent=Math.floor(state.score); $best.textContent=state.best; $misses.textContent=state.misses; $envTag.textContent=ENV[state.envIndex].name; }

  // Start overlay visible initially
  show($startOverlay);

  // ---- Smoke tests (console) ----
  (function runSmokeTests(){
    const results=[];
    function ok(name, cond){ results.push([name, !!cond]); }
    try{
      ok('ENV has 5', ENV.length===5);
      ok('drawDecoBack exists', typeof drawDecoBack==='function');
      const cars0 = state.items.cars.length; spawnCar(); ok('spawnCar adds car', state.items.cars.length===cars0+1);
      const pass0 = state.items.passengers.length; spawnPassenger(); ok('spawnPassenger adds passenger', state.items.passengers.length===pass0+1);
      // Safe lane check: put a car in lane 1 at spawn row; passenger lane should not be 0/1/2 (adjacent)
      state.items.cars.push({x:laneX(1),y:-60,w:50,h:90,l:1,spd:100});
      const testLane = pickSafePassengerLane(); ok('safe lane avoids car lane & adjacents', ![0,1,2].includes(testLane));
      // Patrice spawn & bullets logic
      const pat0=state.items.patrice.length; spawnPatrice(); ok('spawnPatrice adds tube', state.items.patrice.length===pat0+1);
      // Bullet destroys obstacle
      const ob0=state.items.obstacles.length; state.items.obstacles.push({x:state.player.x,y:state.player.y-120,w:40,h:40,l:0,cone:false});
      const bulletsBefore=state.items.bullets.length;
      state.player.shootUntil = performance.now()+200; state.player.shootTimer=0;
      const last = state.last; state.last = performance.now()-50; update(performance.now()); state.last=last;
      ok('bullet spawns when Patrice active', state.items.bullets.length>bulletsBefore);
      ok('bullet can destroy obstacle', state.items.obstacles.length < ob0+1);
      // Passenger watchdog: force long gap and large cooldown -> should spawn
      state.items.passengers.length = 0;
      state.spawn.pass = 999;
      state.lastPassengerSpawnAt = performance.now()-13000;
      const beforeWatch = state.items.passengers.length;
      update(performance.now());
      ok('passenger watchdog spawns', state.items.passengers.length > beforeWatch);
    }catch(e){
      console.warn('Smoke tests error:', e);
    }finally{
      const pass = results.filter(r=>r[1]).length;
      console.log('%cSMOKE TESTS','font-weight:bold', results);
      if(pass!==results.length) console.warn('Some smoke tests failed', results);
    }
  })();

})();
</script>
</body>
</html>
